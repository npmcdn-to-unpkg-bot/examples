package examples.spa.backend.myRest.meta;

import java.sql.DatabaseMetaData;
import java.sql.RowIdLifetime;
import java.sql.SQLException;

public class MyDatabaseMetaParams {
	public boolean allProceduresAreCallable;
	public boolean allTablesAreSelectable;
	public String url;
	public String userName;
	public boolean isReadOnly;
	public boolean nullsAreSortedHigh;
	public boolean nullsAreSortedLow;
	public boolean nullsAreSortedAtStart;
	public boolean nullsAreSortedAtEnd;
	public String databaseProductName;
	public String databaseProductVersion;
	public String driverName;
	public String driverVersion;
	public int driverMajorVersion;
	public int driverMinorVersion;
	public boolean usesLocalFiles;
	public boolean usesLocalFilePerTable;
	public boolean supportsMixedCaseIdentifiers;
	public boolean storesUpperCaseIdentifiers;
	public boolean storesLowerCaseIdentifiers;
	public boolean storesMixedCaseIdentifiers;
	public boolean supportsMixedCaseQuotedIdentifiers;
	public boolean storesUpperCaseQuotedIdentifiers;
	public boolean storesLowerCaseQuotedIdentifiers;
	public boolean storesMixedCaseQuotedIdentifiers;
	public String identifierQuoteString;
	public String sqlKeywords;
	public String numericFunctions;
	public String stringFunctions;
	public String systemFunctions;
	public String timeDateFunctions;
	public String searchStringEscape;
	public String extraNameCharacters;
	public boolean supportsAlterTableWithAddColumn;
	public boolean supportsAlterTableWithDropColumn;
	public boolean supportsColumnAliasing;
	public boolean nullPlusNonNullIsNull;
	public boolean supportsConvert;
//	public boolean supportsConvert(int fromType, int toType)
	public boolean supportsTableCorrelationNames;
	public boolean supportsDifferentTableCorrelationNames;
	public boolean supportsExpressionsInOrderBy;
	public boolean supportsOrderByUnrelated;
	public boolean supportsGroupBy;
	public boolean supportsGroupByUnrelated;
	public boolean supportsGroupByBeyondSelect;
	public boolean supportsLikeEscapeClause;
	public boolean supportsMultipleResultSets;
	public boolean supportsMultipleTransactions;
	public boolean supportsNonNullableColumns;
	public boolean supportsMinimumSQLGrammar;
	public boolean supportsCoreSQLGrammar;
	public boolean supportsExtendedSQLGrammar;
	public boolean supportsANSI92EntryLevelSQL;
	public boolean supportsANSI92IntermediateSQL;
	public boolean supportsANSI92FullSQL;
	public boolean supportsIntegrityEnhancementFacility;
	public boolean supportsOuterJoins;
	public boolean supportsFullOuterJoins;
	public boolean supportsLimitedOuterJoins;
	public String schemaTerm;
	public String procedureTerm;
	public String catalogTerm;
	public boolean isCatalogAtStart;
	public String catalogSeparator;
	public boolean supportsSchemasInDataManipulation;
	public boolean supportsSchemasInProcedureCalls;
	public boolean supportsSchemasInTableDefinitions;
	public boolean supportsSchemasInIndexDefinitions;
	public boolean supportsSchemasInPrivilegeDefinitions;
	public boolean supportsCatalogsInDataManipulation;
	public boolean supportsCatalogsInProcedureCalls;
	public boolean supportsCatalogsInTableDefinitions;
	public boolean supportsCatalogsInIndexDefinitions;
	public boolean supportsCatalogsInPrivilegeDefinitions;
	public boolean supportsPositionedDelete;
	public boolean supportsPositionedUpdate;
	public boolean supportsSelectForUpdate;
	public boolean supportsStoredProcedures;
	public boolean supportsSubqueriesInComparisons;
	public boolean supportsSubqueriesInExists;
	public boolean supportsSubqueriesInIns;
	public boolean supportsSubqueriesInQuantifieds;
	public boolean supportsCorrelatedSubqueries;
	public boolean supportsUnion;
	public boolean supportsUnionAll;
	public boolean supportsOpenCursorsAcrossCommit;
	public boolean supportsOpenCursorsAcrossRollback;
	public boolean supportsOpenStatementsAcrossCommit;
	public boolean supportsOpenStatementsAcrossRollback;
	public int maxBinaryLiteralLength;
	public int maxCharLiteralLength;
	public int maxColumnNameLength;
	public int maxColumnsInGroupBy;
	public int maxColumnsInIndex;
	public int maxColumnsInOrderBy;
	public int maxColumnsInSelect;
	public int maxColumnsInTable;
	public int maxConnections;
	public int maxCursorNameLength;
	public int maxIndexLength;
	public int maxSchemaNameLength;
	public int maxProcedureNameLength;
	public int maxCatalogNameLength;
	public int maxRowSize;
	public boolean doesMaxRowSizeIncludeBlobs;
	public int maxStatementLength;
	public int maxStatements;
	public int maxTableNameLength;
	public int maxTablesInSelect;
	public int maxUserNameLength;
	public int defaultTransactionIsolation;
	public boolean supportsTransactions;
//	public boolean supportsTransactionIsolationLevel(int level)
	public boolean supportsDataDefinitionAndDataManipulationTransactions;
	public boolean supportsDataManipulationTransactionsOnly;
	public boolean dataDefinitionCausesTransactionCommit;
	public boolean dataDefinitionIgnoredInTransactions;
//	public boolean supportsResultSetType(int type);
//	public boolean supportsResultSetConcurrency(int type, int concurrency);
//	public boolean ownUpdatesAreVisible(int type);
//	...
	public boolean supportsBatchUpdates;
	public boolean supportsSavepoints;
	public boolean supportsNamedParameters;
	public boolean supportsMultipleOpenResults;
	public boolean supportsGetGeneratedKeys;
	public int resultSetHoldability;
	public int databaseMajorVersion;
	public int databaseMinorVersion;
	public int jdbcMajorVersion;
	public int jdbcMinorVersion;
	public int sqlStateType;
	public boolean locatorsUpdateCopy;
	public boolean supportsStatementPooling;
	public RowIdLifetime rowIdLifetime;
	public boolean supportsStoredFunctionsUsingCallSyntax;
	public boolean autoCommitFailureClosesAllResultSets;
	public boolean generatedKeyAlwaysReturned;
	public long maxLogicalLobSize;
	public boolean supportsRefCursors;
	
	public void load(DatabaseMetaData m) throws SQLException {
		allProceduresAreCallable = m.allProceduresAreCallable();
		allTablesAreSelectable = m.allTablesAreSelectable();
		url = m.getURL();
		userName = m.getUserName();
		isReadOnly = m.isReadOnly();
		nullsAreSortedHigh = m.nullsAreSortedHigh();
		nullsAreSortedLow = m.nullsAreSortedLow();
		nullsAreSortedAtStart = m.nullsAreSortedAtStart();
		nullsAreSortedAtEnd = m.nullsAreSortedAtEnd();
		databaseProductName = m.getDatabaseProductName();
		databaseProductVersion = m.getDatabaseProductVersion();
		driverName = m.getDriverName();
		driverVersion = m.getDriverVersion();
		driverMajorVersion = m.getDriverMajorVersion();
		driverMinorVersion = m.getDriverMinorVersion();
		usesLocalFiles = m.usesLocalFiles();
		usesLocalFilePerTable = m.usesLocalFilePerTable();
		supportsMixedCaseIdentifiers = m.supportsMixedCaseIdentifiers();
		storesUpperCaseIdentifiers = m.storesUpperCaseIdentifiers();
		storesLowerCaseIdentifiers = m.storesLowerCaseIdentifiers();
		storesMixedCaseIdentifiers = m.storesMixedCaseIdentifiers();
		supportsMixedCaseQuotedIdentifiers = m.supportsMixedCaseQuotedIdentifiers();
		storesUpperCaseQuotedIdentifiers = m.storesUpperCaseQuotedIdentifiers();
		storesLowerCaseQuotedIdentifiers = m.storesLowerCaseQuotedIdentifiers();
		storesMixedCaseQuotedIdentifiers = m.storesMixedCaseQuotedIdentifiers();
		identifierQuoteString = m.getIdentifierQuoteString();
		sqlKeywords = m.getSQLKeywords();
		numericFunctions = m.getNumericFunctions();
		stringFunctions = m.getStringFunctions();
		systemFunctions = m.getSystemFunctions();
		timeDateFunctions = m.getTimeDateFunctions();
		searchStringEscape = m.getSearchStringEscape();
		extraNameCharacters = m.getExtraNameCharacters();
		supportsAlterTableWithAddColumn = m.supportsAlterTableWithAddColumn();
		supportsAlterTableWithDropColumn = m.supportsAlterTableWithDropColumn();
		supportsColumnAliasing = m.supportsColumnAliasing();
		nullPlusNonNullIsNull = m.nullPlusNonNullIsNull();
		supportsConvert = m.supportsConvert();
		supportsTableCorrelationNames = m.supportsTableCorrelationNames();
		supportsDifferentTableCorrelationNames = m.supportsDifferentTableCorrelationNames();
		supportsExpressionsInOrderBy = m.supportsExpressionsInOrderBy();
		supportsOrderByUnrelated = m.supportsOrderByUnrelated();
		supportsGroupBy = m.supportsGroupBy();
		supportsGroupByUnrelated = m.supportsGroupByUnrelated();
		supportsGroupByBeyondSelect = m.supportsGroupByBeyondSelect();
		supportsLikeEscapeClause = m.supportsLikeEscapeClause();
		supportsMultipleResultSets = m.supportsMultipleResultSets();
		supportsMultipleTransactions = m.supportsMultipleTransactions();
		supportsNonNullableColumns = m.supportsNonNullableColumns();
		supportsMinimumSQLGrammar = m.supportsMinimumSQLGrammar();
		supportsCoreSQLGrammar = m.supportsCoreSQLGrammar();
		supportsExtendedSQLGrammar = m.supportsExtendedSQLGrammar();
		supportsANSI92EntryLevelSQL = m.supportsANSI92EntryLevelSQL();
		supportsANSI92IntermediateSQL = m.supportsANSI92IntermediateSQL();
		supportsANSI92FullSQL = m.supportsANSI92FullSQL();
		supportsIntegrityEnhancementFacility = m.supportsIntegrityEnhancementFacility();
		supportsOuterJoins = m.supportsOuterJoins();
		supportsFullOuterJoins = m.supportsFullOuterJoins();
		supportsLimitedOuterJoins = m.supportsLimitedOuterJoins();
		schemaTerm = m.getSchemaTerm();
		procedureTerm = m.getProcedureTerm();
		catalogTerm = m.getCatalogTerm();
		isCatalogAtStart = m.isCatalogAtStart();
		catalogSeparator = m.getCatalogSeparator();
		supportsSchemasInDataManipulation = m.supportsSchemasInDataManipulation();
		supportsSchemasInProcedureCalls = m.supportsSchemasInProcedureCalls();
		supportsSchemasInTableDefinitions = m.supportsSchemasInTableDefinitions();
		supportsSchemasInIndexDefinitions = m.supportsSchemasInIndexDefinitions();
		supportsSchemasInPrivilegeDefinitions = m.supportsSchemasInPrivilegeDefinitions();
		supportsCatalogsInDataManipulation = m.supportsCatalogsInDataManipulation();
		supportsCatalogsInProcedureCalls = m.supportsCatalogsInProcedureCalls();
		supportsCatalogsInTableDefinitions = m.supportsCatalogsInTableDefinitions();
		supportsCatalogsInIndexDefinitions = m.supportsCatalogsInIndexDefinitions();
		supportsCatalogsInPrivilegeDefinitions = m.supportsCatalogsInPrivilegeDefinitions();
		supportsPositionedDelete = m.supportsPositionedDelete();
		supportsPositionedUpdate = m.supportsPositionedUpdate();
		supportsSelectForUpdate = m.supportsSelectForUpdate();
		supportsStoredProcedures = m.supportsStoredProcedures();
		supportsSubqueriesInComparisons = m.supportsSubqueriesInComparisons();
		supportsSubqueriesInExists = m.supportsSubqueriesInExists();
		supportsSubqueriesInIns = m.supportsSubqueriesInIns();
		supportsSubqueriesInQuantifieds = m.supportsSubqueriesInQuantifieds();
		supportsCorrelatedSubqueries = m.supportsCorrelatedSubqueries();
		supportsUnion = m.supportsUnion();
		supportsUnionAll = m.supportsUnionAll();
		supportsOpenCursorsAcrossCommit = m.supportsOpenCursorsAcrossCommit();
		supportsOpenCursorsAcrossRollback = m.supportsOpenCursorsAcrossRollback();
		supportsOpenStatementsAcrossCommit = m.supportsOpenStatementsAcrossCommit();
		supportsOpenStatementsAcrossRollback = m.supportsOpenStatementsAcrossRollback();
		maxBinaryLiteralLength = m.getMaxBinaryLiteralLength();
		maxCharLiteralLength = m.getMaxCharLiteralLength();
		maxColumnNameLength = m.getMaxColumnNameLength();
		maxColumnsInGroupBy = m.getMaxColumnsInGroupBy();
		maxColumnsInIndex = m.getMaxColumnsInIndex();
		maxColumnsInOrderBy = m.getMaxColumnsInOrderBy();
		maxColumnsInSelect = m.getMaxColumnsInSelect();
		maxColumnsInTable = m.getMaxColumnsInTable();
		maxConnections = m.getMaxConnections();
		maxCursorNameLength = m.getMaxCursorNameLength();
		maxIndexLength = m.getMaxIndexLength();
		maxSchemaNameLength = m.getMaxSchemaNameLength();
		maxProcedureNameLength = m.getMaxProcedureNameLength();
		maxCatalogNameLength = m.getMaxCatalogNameLength();
		maxRowSize = m.getMaxRowSize();
		doesMaxRowSizeIncludeBlobs = m.doesMaxRowSizeIncludeBlobs();
		maxStatementLength = m.getMaxStatementLength();
		maxStatements = m.getMaxStatements();
		maxTableNameLength = m.getMaxTableNameLength();
		maxTablesInSelect = m.getMaxTablesInSelect();
		maxUserNameLength = m.getMaxUserNameLength();
		defaultTransactionIsolation = m.getDefaultTransactionIsolation();
		supportsTransactions = m.supportsTransactions();
		supportsDataDefinitionAndDataManipulationTransactions = m.supportsDataDefinitionAndDataManipulationTransactions();
		supportsDataManipulationTransactionsOnly = m.supportsDataManipulationTransactionsOnly();
		dataDefinitionCausesTransactionCommit = m.dataDefinitionCausesTransactionCommit();
		dataDefinitionIgnoredInTransactions = m.dataDefinitionIgnoredInTransactions();
		supportsBatchUpdates = m.supportsBatchUpdates();
		supportsSavepoints = m.supportsSavepoints();
		supportsNamedParameters = m.supportsNamedParameters();
		supportsMultipleOpenResults = m.supportsMultipleOpenResults();
		supportsGetGeneratedKeys = m.supportsGetGeneratedKeys();
		resultSetHoldability = m.getResultSetHoldability();
		databaseMajorVersion = m.getDatabaseMajorVersion();
		databaseMinorVersion = m.getDatabaseMinorVersion();
		jdbcMajorVersion = m.getJDBCMajorVersion();
		jdbcMinorVersion = m.getJDBCMinorVersion();
		sqlStateType = m.getSQLStateType();
		locatorsUpdateCopy = m.locatorsUpdateCopy();
		supportsStatementPooling = m.supportsStatementPooling();
		rowIdLifetime = m.getRowIdLifetime();
		supportsStoredFunctionsUsingCallSyntax = m.supportsStoredFunctionsUsingCallSyntax();
		autoCommitFailureClosesAllResultSets = m.autoCommitFailureClosesAllResultSets();
		generatedKeyAlwaysReturned = m.generatedKeyAlwaysReturned();
		maxLogicalLobSize = m.getMaxLogicalLobSize();
		supportsRefCursors = m.supportsRefCursors();
	}
}
